

using Il2Cpp;
using Il2CppBasicTypes;
using System;
using System.Collections.Generic;

 
namespace BMod.KrakPath
{
  public class SkiddedMinePath
  {
    private Func<PNode, int> _getWeight;
    private PNode _start;
    private PNode _goal;
    private int _width;
    private int _height;

    private World.BlockType GetBlockType(PNode node)
    {
      World.BlockType blockType = Globals.world.GetBlockType(new Vector2i(node.X, node.Y));
      return !Globals.teleport.pather.path.Contains(node) || blockType == 4103 ? blockType : (World.BlockType) 0;
    }

    public SkiddedMinePath()
    {
      this._getWeight = (Func<PNode, int>) (node =>
      {
        World.BlockType blockType = this.GetBlockType(node);
        if (blockType <= 3)
        {
          if (blockType == null || blockType != 3)
            return 1;
        }
        else
        {
          switch (blockType - 3966)
          {
            case 0:
              break;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 21:
            case 31:
            case 32:
            case 35:
              return 1;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 30:
            case 34:
            case 36:
              return 2;
            case 19:
            case 20:
            case 23:
            case 25:
            case 26:
            case 28:
            case 33:
              return 3;
            case 22:
            case 24:
            case 27:
            case 29:
              return 4;
            default:
              if (blockType == 4103)
                break;
              goto case 1;
          }
        }
        return 1000;
      });
    }

    public int Heuristic(PNode a, PNode b) => Math.Abs(a.X - b.X) + Math.Abs(a.Y - b.Y);

    public List<PNode> FindPath(PNode start, PNode goal)
    {
      this._start = start;
      this._goal = goal;
      this._width = Globals.world.worldSizeX;
      this._height = Globals.world.worldSizeY;
      HashSet<PNode> pnodeSet1 = new HashSet<PNode>();
      HashSet<PNode> pnodeSet2 = new HashSet<PNode>()
      {
        this._start
      };
      Dictionary<PNode, PNode> cameFrom = new Dictionary<PNode, PNode>();
      Dictionary<PNode, int> dictionary1 = new Dictionary<PNode, int>()
      {
        {
          this._start,
          0
        }
      };
      Dictionary<PNode, int> dictionary2 = new Dictionary<PNode, int>()
      {
        {
          this._start,
          this.Heuristic(this._start, this._goal)
        }
      };
      while (pnodeSet2.Count > 0)
      {
        PNode pnode = this._start;
        int maxValue = int.MaxValue;
        foreach (PNode key in pnodeSet2)
        {
          if (!dictionary2.ContainsKey(key))
            dictionary2[key] = int.MaxValue;
          if (dictionary2[key] < maxValue)
          {
            maxValue = dictionary2[key];
            pnode = key;
          }
        }
        if (pnode.Equals((object) this._goal))
          return this.ReconstructPath(cameFrom, pnode);
        pnodeSet2.Remove(pnode);
        pnodeSet1.Add(pnode);
        foreach (PNode neighbor in this.GetNeighbors(pnode))
        {
          if (!pnodeSet1.Contains(neighbor))
          {
            int num = dictionary1[pnode] + this._getWeight(neighbor);
            if (!pnodeSet2.Contains(neighbor))
              pnodeSet2.Add(neighbor);
            else if (num >= dictionary1[neighbor])
              continue;
            cameFrom[neighbor] = pnode;
            dictionary1[neighbor] = num;
            dictionary2[neighbor] = dictionary1[neighbor] + this.Heuristic(neighbor, this._goal);
          }
        }
      }
      return (List<PNode>) null;
    }

    private List<PNode> ReconstructPath(Dictionary<PNode, PNode> cameFrom, PNode current)
    {
      List<PNode> pnodeList = new List<PNode>();
      pnodeList.Add(current);
      while (cameFrom.ContainsKey(current))
      {
        current = cameFrom[current];
        pnodeList.Add(current);
      }
      pnodeList.Reverse();
      return pnodeList;
    }

    private List<PNode> GetNeighbors(PNode node)
    {
      List<PNode> neighbors = new List<PNode>();
      for (int index1 = -1; index1 <= 1; ++index1)
      {
        for (int index2 = -1; index2 <= 1; ++index2)
        {
          if ((index1 != 0 || index2 != 0) && (Math.Abs(index1) != 1 || Math.Abs(index2) != 1))
          {
            int x = node.X + index1;
            int y = node.Y + index2;
            if (x >= 0 && x < this._width && y >= 0 && y < this._height)
              neighbors.Add(PNode.Create(x, y));
          }
        }
      }
      return neighbors;
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣟⡿⣟⣿⣻⣟⣿⣻⣟⢿⣽⣻⢽⢯⡟⡿⣽⢯⣟⠿⣽⣻⡽⢯⣟⣯⣟⢯⣟⡿⣽⣻⣽⢻⣯⡟⡿⣽⢯⣻⡝⣯⢽⣩⢏⢮⡱⢎⢲⡑⠆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣽⣫⢿⣿⣽⣾⣟⣻⠉⡊⠛⠋⡽⢿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣽⡾⣟⣯⢿⣻⣞⣷⣻⣞⡷⢯⣻⠶⣏⢿⡺⣽⣹⡞⣽⣚⡟⣧⢷⣛⡿⡼⢶⣫⣟⡾⣽⣳⢯⣞⡿⣶⣻⣽⣳⢯⣷⣹⢧⡻⣜⣚⢦⡙⢮⡱⢬⡙⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣽⡿⣯⣟⣿⣽⣻⢷⣻⣞⡷⣯⣻⢏⣷⢿⣿⣾⣷⣿⢯⣽⣝⡛⠾⣧⣟⡼⢳⡝⣯⢳⡞⣽⠾⣵⣻⢾⣽⣳⡟⣾⡽⣳⢧⡟⣧⢻⡼⣩⠶⣙⢦⠳⡌⢞⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⣿⣿⣿⠯⡟⠂⡌⣮⣿⡟⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣿⣟⣿⣽⣟⣾⣳⢿⣯⢷⣯⣟⣷⣯⢿⣭⡟⢯⣽⢃⢆⢺⣴⣊⠙⢦⡀⠈⠙⠧⣞⢌⡳⣹⢧⣛⠷⣯⣻⢶⣯⢟⣷⣻⡽⢯⡽⣝⣧⢻⣥⢻⡜⣎⢧⡙⣎⢆⣿⣿⣿⣾⣿⣟⣿⣿⣿⣿⣿⣿⢿⣻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣾⣟⣷⣟⡿⣾⣽⣷⣻⣟⣾⣻⣾⣿⢿⣸⣿⢫⢼⣷⡏⣷⡾⠟⠏⠃⠀⠀⠑⢆⠀⠀⠈⠳⣔⠱⢮⡝⣯⢳⣏⡿⣞⡿⣞⣷⣻⢯⣟⢷⣭⣳⢎⡷⣚⡼⢢⡝⡜⢮⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣟⣯⠷⣭⢻⡔⣫⠞⣊⠔⡁ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣽⣟⣷⣿⣻⣾⣟⣿⢾⣳⡿⣞⣷⣿⣿⣟⢣⣾⡏⢆⣿⢼⡇⠋⡁⠀⢸⠠⠰⡀⡀⠀⢢⠀⠀⢂⠈⠳⣜⠺⣵⡛⣞⡽⣯⢿⡽⣾⣽⣻⣞⡿⢶⣫⢟⡼⣣⡝⣧⡝⡞⣥⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣳⣛⡾⣵⢫⡖⣍⠲ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣟⣿⡾⣟⣾⣟⡷⣿⢯⣿⣻⣽⣿⣿⣿⣿⢏⣾⣿⢘⡞⡽⢸⢣⠀⠇⠀⠀⡆⡇⣷⡈⠀⠀⢣⠀⠀⢠⠘⢿⣧⠳⣝⣎⡳⣏⡿⣽⣳⢯⡷⣯⣟⣯⢯⣟⢾⣱⣛⢶⡹⣝⢮⡳⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⣯⢷⣻⡜⣯ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⡿⣯⣷⢿⣟⣿⢾⣿⣻⡿⣽⣿⣿⣿⣿⣿⡿⢎⣿⡟⢸⢡⣷⠈⣇⠣⣀⡃⠀⣧⢧⡛⠻⣦⡀⠄⢇⠀⠀⢆⠈⢿⣧⢻⣎⣷⢺⣽⣳⣟⣯⣟⣷⣻⣞⡿⣞⣯⣳⢏⡷⣝⢮⡳⣝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡾⣽⣏⣯⣗⣿⣳ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣯⣷⢿⣻⣽⡿⣯⢿⣻⣽⣷⣿⣿⣿⣿⣿⣿⣿⡿⡞⣿⡇⡘⣾⢱⠀⣿⣤⠞⠑⢲⣿⣿⣇⠀⠈⠳⣜⣿⡀⠀⠈⡆⠈⢾⡧⢿⡜⣟⣾⣳⣟⡾⣽⣞⡷⣯⢿⡽⣞⡷⣯⡟⣾⣭⢷⣛⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣾⣽⣾⢿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣾⢿⣽⡾⣟⣿⣳⣿⣻⡿⣯⣿⣾⣿⣿⣿⣿⣿⣿⣿⣳⡛⡿⡇⢹⠇⢈⣾⠻⣿⡄⢠⢾⣿⡾⡏⠈⠉⠉⠙⢿⡇⠀⢠⠸⠰⡀⢻⡞⣽⢯⣞⡷⣯⣟⣯⢿⣽⢯⣿⡽⣯⣟⣷⣻⠷⣞⣯⣳⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣟⣿⣳⡿⣿⣽⢯⣷⡿⣽⣿⣳⣿⣿⣿⣿⣿⣿⣿⣿⣥⢃⣧⣧⡞⠊⠁⠻⣧⠿⣘⣏⣾⠿⠽⣷⣿⠿⢿⡻⣾⣷⡇⢸⡌⡇⢱⡄⣙⢧⣿⣾⣟⣷⣻⢾⣻⣽⢿⣾⣻⣷⣻⢾⣽⣻⡽⣶⢯⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⡿⣷⣟⣷⣯⡷⣿⣽⣟⣾⢿⣯⢿⣟⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠸⣼⢁⣤⣶⡿⠟⠒⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢰⣿⠆⢨⣿⢹⡀⣷⣌⢻⡝⣻⢼⣳⢯⡿⣽⡾⣟⣷⣿⣳⡿⣟⣾⢷⣻⣽⣻⢾⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣻⣟⣾⣟⣾⣽⣟⣾⣯⢿⣻⣽⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⡿⣧⠘⢿⠯⠤⠉⠀⠀⠀⠀⠀⣲⠀⠀⠀⠀⠀⠀⠀⠎⣿⡂⠐⣿⠀⣧⢸⡞⣆⢻⡜⣧⣻⢯⣟⡷⣿⣻⣽⣾⢿⣽⡿⣯⣿⢯⣷⢿⣯⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⢷⣿⢯⣷⢿⣽⡾⣯⣷⢿⣻⣿⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣽⣿⢯⣷⡀⠣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡞⢠⣣⠀⢀⣿⢠⡏⣿⡗⣽⢸⣟⡶⣯⣟⣾⣽⣟⣯⣿⣯⣿⣟⣿⣿⣽⡿⣯⣿⢾⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣻⣿⢯⣿⢯⣿⣞⣿⣳⡿⣟⣿⣳⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⡟⠛⡆⠈⠻⣷⡭⡂⠀⠀⠀⠀⣤⣶⠶⠿⢿⡆⠀⢸⢀⣾⡇⠀⣸⠀⣸⣷⠸⣿⣾⣿⣯⣷⣿⢾⣽⣾⣟⣿⣷⣿⣻⣿⣿⣾⣟⣿⡿⣯⣿⡿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⢿⣽⡿⣯⣿⢷⣯⣿⡽⣟⣿⣯⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣻⠇⣸⡁⠀⣹⡄⠠⡙⢷⡌⠑⠀⠀⠀⠛⠁⠒⠂⠉⠁⠀⠐⣡⡿⠀⢀⡇⢀⡏⣼⢸⣿⣿⣿⣯⣿⣿⣞⣿⣷⡿⣿⣾⣿⣿⣿⣾⣿⣿⡿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣻⣽⡿⣽⣯⣷⣟⣿⣟⣿⡾⣟⣾⣿⣿⣯⣿⣾⣿⣿⣿⣽⢠⡟⣇⢳⡘⣿⡄⠑⠌⢻⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣧⠀⣼⣿⢸⣧⢇⣿⣼⣻⣧⢻⡿⣿⣿⣿⡿⣽⣿⣷⣿⣿⣽⣿⣷⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣽⣿⢯⣿⣟⣷⡿⣾⣻⣾⢯⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⡼⣏⣷⣹⣆⢻⣽⣿⢦⠀⠂⢹⣿⣿⣿⠒⡤⣄⣀⡤⠊⣡⢿⣿⡇⢀⣧⣿⣎⣿⣸⡿⣼⣿⣧⡟⣯⢻⣱⣿⣻⣟⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣟⣯⣿⢿⣾⢯⣿⢿⣽⣻⣿⣻⣾⣿⣿⣿⣿⣿⣿⣿⣟⣿⣽⣻⢿⣿⣿⣿⣿⣿⢸⣧⠀⠈⣿⢿⣿⡇⠰⠀⠙⢒⡜⠁⢺⣿⡇⢸⣿⣿⣿⣽⣾⣯⡵⠮⠴⣭⡩⢟⡽⡾⣽⣻⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⡿⣟⣿⣯⣿⢯⣿⢿⣽⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣯⣿⣽⣿⣿⣿⣯⣿⣿⡇⠀⢸⣿⡿⢿⡀⢀⣠⠞⠀⠀⠈⠙⣧⢸⠛⠛⠻⠉⠁⠀⠀⠀⠀⠀⠉⢳⣽⣻⣽⢿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⡿⣿⣯⣿⢿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠛⢛⠛⠛⢿⠀⣎⣿⠷⠚⠳⠉⠀⠀⠀⢀⡠⠤⢿⡘⡆⠁⠀⠀⠀⠀⠀⣄⡀⠀⠀⠀⠻⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣯⣿⢿⣽⣷⡿⣯⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠉⠒⢾⠀⣸⡟⢆⠀⠀⠑⠀⢀⠊⠠⠐⠀⢸⡳⣧⡍⡓⠤⠄⣤⣤⣿⣂⣀⠀⠀⠀⢒⡿⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣽⣿⢿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⡀⠀⠀⠀⠀⣾⠇⣿⠇⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⡹⣝⠢⡀⠀⠀⠀⠀⠀⠀⠈⠉⠓⠒⢒⡽⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣽⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠅⠀⠈⠀⢰⡇⠀⡔⠀⢠⠟⣰⠏⠀⣠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠓⠬⢷⣢⣄⣟⠀⠀⠀⠀⠀⠀⠀⠀⢹⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠈⢷⡸⠀⣰⣟⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠸⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⢀⢼⣷⠾⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡀⠀⠀⣄⢄⠀⢀⣪⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠰⠚⠁⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⡏⣦⠘⡇⠀⢝⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⣠⠾⠊⠀⠀⠠⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⠀⠀⢀⡄⠀⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢺⠓⠀⡜⡆⢤⡄⠂⢠⠀⠀⠀⠀⠀⠀⠀⠀⢀⠂⠀⠀⠀⠈⠢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⢁⣀⠀⠀⠀⠀⡀⢈⠻⣿⣿⣿⢿⡿⣿⢿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠑⢳⣦⣤⣠⠜⠀⠀⠀⠀⠀⠀⢀⡔⠁⠀⠀⠀⠀⠀⠀⠀⠙⠒⢤⣤⣄⣀⣀⣀⣀⣤⡶⠇⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠉⠀⢀⣈⡉⠰⠄⣈⣀⣠⡈⠻⣞⣯⢿⣽⣻ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠈⠉⠉⠁⠀⠀⠀⠀⠀⢀⣴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⢤⣉⠉⣡⡾⣿⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠛⠋⠉⠀⠀⠀⣀⣀⠀⠔⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⢳⡾⢯⡷⣳⢯ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⢶⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⠋⠀⣼⠀⠀⠀⠼⠛⠛⠛⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠚⠝⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡏⢾⠱⡏ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣀⡄⠀⠀⢀⣀⣄⣴⠞⢤⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⢀⡔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣺⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡘⢧⡸ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡌⠣⢞⣿⠤⢹⠞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡇⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⠟⠉⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡍⢲⠱ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡑⠌⠾⣧⢂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣧⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⡅⢂ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣉⠓⡌⠱⡹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⢝⠒⢂⣀⣠⣤⣤⣶⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠀⠄⡡ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⡄⢃⠌⡑⢄⠻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠙⠻⢿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡗⢈⡐⠄ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠇⡌⠌⣳⠈⡜⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⠴⣤⢳ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠣⠌⢂⢍⠒⢬⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⠑⡌⠢⢌⡘⣼⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣷⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢿⣛⠿⣟⢻⡿⣿⣿⠰⣈⠑⢢⡐⣿⡇⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣯⣟⡾⣽⣳⢯⣟⣿⣿⠿⠿⠷⠳⢦⣈⡛⠬⠆⡙⢌⢻⠰⢠⠉⢆⣸⣿⠁⢀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⡿⣿ ///
/// ⣿⣿⣿⣿⣿⣿⡿⣿⡽⡾⣝⠾⣜⡳⢭⡳⢫⠞⡽⣛⡿⣳⢶⣤⣀⠈⢁⠢⠑⡌⠢⢽⡎⠤⡉⢆⣾⡿⠀⡘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣟⡳⢟⡽ ///
/// ⣿⣿⣿⣿⣟⣯⡟⣷⣹⢳⣭⢻⣬⢳⢫⢵⢫⡽⣱⢫⣜⡷⠿⠻⠿⠿⠦⢁⠃⡄⠣⡘⠷⢂⡱⣪⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢏⡰⢉⡒⠄ ///
/// ⣿⣿⣟⣷⢻⡼⣽⢲⣏⠷⣎⠷⣜⣣⠟⣎⢷⡺⣵⣫⣟⡿⣶⣶⣤⣤⣤⣀⣦⣰⣵⣼⣷⣷⣶⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠄⢢⠁⢆⠡ ///
/// ⣿⡳⣞⡾⣹⢞⡵⣫⢞⡽⢎⡟⣬⡓⣿⡸⢧⣛⣶⣻⣼⢿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⢈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢈⠆⡑⠈⠄ ///
/// ⣷⢻⡵⣫⢗⡯⣞⡵⣫⢞⡽⢺⣱⢛⣶⣹⣧⣟⡶⠯⠿⠛⠛⠋⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠐⠚⠒⠤⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠡⡈⠔⡈⠡⠀ ///
/// ⡽⣣⢟⡵⣫⢞⣬⡷⠽⠚⠛⠋⠉⠉⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠇⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡏⢀⠌⠐⡀⠡⠀ ///
/// ⡻⣵⢫⣞⠵⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠒⢤⣀⠀⠀⠀⠀⢰⣠⠀⠀⠀⠀⢸⠁⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⢽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⢂⠈⠄⠠⠐⠀ ///
/// ⣟⠼⡳⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⡄⠀⠀⠀⢿⡆⢠⠀⠀⢸⠀⠀⣀⠔⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠡⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⡀⠈⠀⡀⠂⠀ ///
/// ⢮⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⠀⠀⠸⡿⢆⠀⠀⠘⣀⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⢀⠈⠀⠀⠀⠀ ///
/// ⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡙⣄⠀⠀⣿⣮⣆⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠰⢹⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠁⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠞⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠢⡀⢻⣿⣿⣄⣰⣿⡆⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠉⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠲⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢿⣟⣿⣿⠍⠰⡀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⡞⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢄⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠈⣽⠙⣿⡄⡀⡱⡄⢠⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⠳⡍⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢯⡒⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⢄⠀⠀⢀⠄⠀⠀⠈⠀⠀⢀⠿⠀⢹⣧⡀⠌⠈⠙⢢⣡⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⡃⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⢱⢊⠴⡙⠷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠈⠀⠀⠀⠀⠀⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠔⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⢸⣿⣷⣧⣆⣀⣀⡈⠓⣤⣀⣀⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⠂⡍⠰⢈⠂⡙⢮⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠿⣦⠀⠀⠀⠀⠀⠂⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⢂⠀⠀⠀⠀⠀⢀⡰⠛⡀⢀⣾⠻⠛⠛⠉⠉⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⢂⠄⡁⢂⠐⠀⠀⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣆⡀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠆⢀⣀⡤⠔⠋⢀⠀⠂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠈⠌⠙⠩⢛⠿⣻⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⠀⢀⠀⠂⠈⠀⠂⠀⠈⠳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣶⣤⣤⣄⣀⣀⡀⠀⠀⠀⠀⢀⣀⣀⣠⣤⣴⣾⣭⣤⢤⣴⣶⠉⠒⠈⠉⠀⠀⣀⠀⠈⠀⠀⠀⠀⠀⠀⠁⠀⠂⠙⣻⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀ ///
/// ⠀⡀⠈⡀⠄⡁⠄⣁⠢⣔⡹⣆⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠛⠉⠈⠉⠈⠀⠀⠀⠀⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀ ///
/// ⠀⢀⠐⣀⠒⣤⢫⣞⣷⣯⣷⣿⣷⡌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⢋⠉⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⢀⣀⣀⣀⠀⣀⠀⠀⠀⠀⠀⠀⠀⢽⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⡧⠀⠀⠈⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀ ///
/// ⠀⠄⡒⢬⣻⣞⣿⣿⣿⣿⣿⣿⣿⣿⣷⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡻⠍⠀⠁⠀⢀⠤⠤⠄⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⠀⢀⠂⠀⢀⠀⠄⠀⠀⠀⢀⠀⠀ ///
/// ⠀⢂⢹⣚⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⠿⣝⠣⠐⠀⠀⠀⠀⠀⠀⠀⠀⠠⠤⠀⠄⠂⠲⣄⡀⠀⠀⠒⠀⠤⠠⠋⠉⠀⠀⠀⠀⠀⠀⠀⢐⣿⡿⠃⠞⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠈⠀⠀⠀⢀⠈⠀⠀⠀⠀ ///
/// ⠀⢊⢶⣹⡾⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣏⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠠⠀⡀⠀⠀⠀⠄⠂⠠⠀ ///
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////